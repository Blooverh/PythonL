 CHAPTER 8 FUNCTIONS

 >> Functions aka names blocks of code that are designed to do one specific task that we have defined in a function
    We call the function responsible for it.

DEFINING A FUNCTION
def gree_user():
    print('hello!')
greet_user() # calls the function

We can have a main function that calls all other functions.

ARGUMENTS AND PARAMETERS
>> When a function is called and we give an information to that function we call it an parameter
>> An argument is the variable that is used to call the function parameter

PASSING ARGUMENTS
>> Because a function definition can have multiple parameters, a function call may need multiple arguments
>> We can pass arguments to our functions in a number of ways.
>> We can use positional arguments, which need to be in the same order the parameters were written
>> Keyword arguments, where each argument consists of a variable name and a value, and lists and dictionaries of values

POSITIONAL ARGUMENTS
When a function is called, python must match each argument in the function call with a parameter in the function definition.
Simplest way to do this is based on the order of the arguments provided. Values matched up this way are called positional arguments

KEYWORD ARGUMENTS
>> name-value pair that we pass to a function.
>> We can directly associate the name and the value within the argument
>> When we pass the argument to the function, there is no confusion.
>> Keyword arguments free the user from having to worry about correctly ordering the
   arguments in the function call, and they clarify the role of each value in the function call

NOTE: When using keyword arguments, be sure to use the exact names of the parameters in the functions definition

DEFAULT VALUES
When writing a function, we can define a default value for each parameter
Meaning if when define a default value we can always call the function and not define our parameter in case
    We want to assume we are using the same argument.
Example:
def describe_pet(pet_name, animal_type='dog): //in animal type we define dog as the default argument for the following parameter
Thus when calling a function if we want to define a dog we can just use:
    describe_pet(pet_name="flash") and not call the parameter animal type since default value dog is what we are using

When a default value is used, any parameter with a default value needs to be listed after all the parameters that do not have
default values. This allows python to continue interpreting positional arguments correctly

EQUIVALENT FUNCTION CALLS
>> Because positional arguments, keyword arguments, and default values can all be used together, often its offered
    several equivalent ways to call a function
>> It does not matter which calling style is used, as long as the function call produces the output needed

AVOIDING ARGUMENT ERRORS
>> Unmatched arguments occurs when we provide fewer or more arguments than a function needs

RETURN VALUES
>> A function does not always have to display its output directly. Instead. it can process some data and then return a value or set of values
>> return statement takes a value from inside a function and sends it back to the line that called the function

OPTIONAL VALUES 
>> They are parameters we can add in the function call but they are not mandatory when calling the function
Check exercise 8-7 and 8-8 for example

