 CHAPTER 8 FUNCTIONS

 >> Functions aka names blocks of code that are designed to do one specific task that we have defined in a function
    We call the function responsible for it.

DEFINING A FUNCTION
def gree_user():
    print('hello!')
greet_user() # calls the function

We can have a main function that calls all other functions.

ARGUMENTS AND PARAMETERS
>> When a function is called and we give an information to that function we call it an parameter
>> An argument is the variable that is used to call the function parameter

PASSING ARGUMENTS
>> Because a function definition can have multiple parameters, a function call may need multiple arguments
>> We can pass arguments to our functions in a number of ways.
>> We can use positional arguments, which need to be in the same order the parameters were written
>> Keyword arguments, where each argument consists of a variable name and a value, and lists and dictionaries of values

POSITIONAL ARGUMENTS
When a function is called, python must match each argument in the function call with a parameter in the function definition.
Simplest way to do this is based on the order of the arguments provided. Values matched up this way are called positional arguments

KEYWORD ARGUMENTS
>> name-value pair that we pass to a function.
>> We can directly associate the name and the value within the argument
>> When we pass the argument to the function, there is no confusion.
>> Keyword arguments free the user from having to worry about correctly ordering the
   arguments in the function call, and they clarify the role of each value in the function call

NOTE: When using keyword arguments, be sure to use the exact names of the parameters in the functions definition

DEFAULT VALUES
When writing a function, we can define a default value for each parameter
Meaning if when define a default value we can always call the function and not define our parameter in case
    We want to assume we are using the same argument.
Example:
def describe_pet(pet_name, animal_type='dog): //in animal type we define dog as the default argument for the following parameter
Thus when calling a function if we want to define a dog we can just use:
    describe_pet(pet_name="flash") and not call the parameter animal type since default value dog is what we are using

When a default value is used, any parameter with a default value needs to be listed after all the parameters that do not have
default values. This allows python to continue interpreting positional arguments correctly

EQUIVALENT FUNCTION CALLS
>> Because positional arguments, keyword arguments, and default values can all be used together, often its offered
    several equivalent ways to call a function
>> It does not matter which calling style is used, as long as the function call produces the output needed

AVOIDING ARGUMENT ERRORS
>> Unmatched arguments occurs when we provide fewer or more arguments than a function needs

RETURN VALUES
>> A function does not always have to display its output directly. Instead. it can process some data and then return a value or set of values
>> return statement takes a value from inside a function and sends it back to the line that called the function

OPTIONAL VALUES 
>> They are parameters we can add in the function call but they are not mandatory when calling the function
Check exercise 8-7 and 8-8 for example

PASSING A LIST
>> When passing a list to a function, the function gets direct access to the contents of the list

MODIFYING A LIST IN A FUNCTION
>> when we pass a list to a funtion we can modify the list. 
>> Any changes made to the list in the function are permanent, allowing to work efficiently when dealing with large amounts of data

Example -> printing_models.py

PREVENTING A FUNCTION FROM MODIFYING A LIST
>> In case we want to keep the original list and not have it being modified by the function
>> We can create a copy of a list and pass it to the function; thus, any modifications
    the function does to the list, it is actually the copy that gets those mods, leaving original list intact

>> send a copy of a list to a function: 
    fuction_name(list_name[:]) -> [:] (slice) notations makes a copy of the list to send to the function

PASSING AN ARBITRARY NUMBER OF ARGUMENTS
>> Some times we do not know ahead of time how many arguments a function needs to accept
    However, Python allows a function to collect an arbitrary number of arguments from calling statement
>> The asterisk in the parameter name *toppings tells Python to make an 
    empty tuple called toppings and pack whatever values it receives into this tuple.

MIXING POSITIONAL AND ARBITRARY ARGUMENTS
>> If we want a function to accept several kinds or arguments, the parameter that accepts 
    an arbitrary number of arguments must be places last in the function.

USING ARBITRARY KEYWORD ARGUMENTS 
>> Sometimes we want to accept an arbitrary numbers of args but we do not know ahead of time 
    what kind of information will be passed to the function.
>> Hence we can write functions that accept as many key values pairs as the calling statement provides.

Example:
def build_profile(first, last, **userInfo) -> **userInfo creates an empty dictionary 
    That will create and store the information as they are passed to the function.

STORING FUNCTIONS IN MODULES 
>>One advantage of functions is the way they separate blocks of code from the main program
>> Thus we can store functions in different files called a MODULES and then 
    importing that module to the main program.
>> Import statement tells python to make the code ina module available in the currently running program
>> Storing your functions in a separate file allows you to hide the details of your programâ€™s code and focus on its higher-level logic
>> It also allows you to reuse functions in many different programs.
>> When you store your functions in separate files, you can share those files with other programmers without 
    having to share your entire program.

IMPORTING AN ENTIRE MODULE
>> A module is a file that ends in .py and contains importable code 

IMPORTING SPECIFIC FUNCTIONS 
>> We can also import a specific function from a module
EXAMPLE: from module_name import function_name
>> We can import as many functions from a module as possible
EXAMPLE: from module_name import function_0, function_1, function_2 

USING 'as' TO GIVE A FUNCTION AN ALIAS 
>> An alternate name similar to a nickname for the function.
EXAMPLE: from module_name import function_name as fn

USINF 'as' TO GIVE A MODULE AN ALIAS 
EXAMPLE: import numpy as np

IMPORTING ALL FUNCTION IN A MODULE 
EXAMPLE: from pizza import * -> asterisk implies all

STYLING FUNCTIONS 
>> Functions should have descriptive names and these names should use lowercase letters and underscores
>> Every functions should have a comment that explains concisely what the function does.
>> This comment shoulf appear immediately after the function definition and use the docstring format
